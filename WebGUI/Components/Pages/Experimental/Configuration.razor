@page "/configuration"
@using WebGUI.Services
@inject ChessConfigurationService Setup
@inject NotifierService Notify

<PageTitle> Configuration settings for Ceres </PageTitle>

  <MudText Typo=Typo.h4>Configuration for the most important setup for using Ceres tool </MudText>
<MudContainer Class="mainContainer">
  <MudGrid Spacing="6">

    <MudItem Class="config">
      <MudText>Setup folders: </MudText>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="Engines folder:" @bind-Value=setting.EngineFolder
                    TextChanged="EngineFolderChanged" Variant="Variant.Filled"></MudTextField>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="Folder for PGN-games:" @bind-Value=setting.PGNFolder
                    TextChanged="PGNFolderChanged" Variant="Variant.Filled"></MudTextField>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="Neural net folder:" @bind-Value=setting.NeuralNetFolder
                    TextChanged="NeuralNetFolderChanged" Variant="Variant.Filled"></MudTextField>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="Tablebase folder:" @bind-Value=setting.TableBaseFolder
                    TextChanged="TBfolderChanged" Variant="Variant.Filled"></MudTextField>
      <MudText Class="mt-4">Engine setup (full path): </MudText>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="Ceres UCI exe:" @bind-Value=setting.ExeExternalCeres
                    TextChanged="CeresUCIChanges" Variant="Variant.Filled"></MudTextField>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="LC0 folder exe:" @bind-Value=setting.ExeLC0
                    TextChanged="LC0ExeChanged" Variant="Variant.Filled"></MudTextField>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="SF UCI exe:" @bind-Value=setting.ExeSF
                    TextChanged="SFExeChanged" Variant="Variant.Filled"></MudTextField>
    </MudItem>

    <MudItem Class="config">
      <MudText>Tournament: </MudText>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="Opening name:" @bind-Value=setting.OpeningName
                    TextChanged="OpeningNameChanged" Variant="Variant.Filled"></MudTextField>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="Neural net:" @bind-Value=setting.NeuralNet
                    TextChanged="NeuralNetChanged" Variant="Variant.Filled"></MudTextField>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="Ref Neural net:" @bind-Value=setting.RefNeuralNet
                    TextChanged="RefNeuralNetChanged" Variant="Variant.Filled"></MudTextField>
      <MudTextField Style="font-size:10px" Class="pa-1 ma-1" Label="Ceres GPU string:" @bind-Value=setting.CeresGPUstring
                    TextChanged="CeresGPUChanged" Variant="Variant.Filled"></MudTextField>
      <MudNumericField Style="font-size:10px" Class="pa-1 ma-1" Label="Number of threads:" @bind-Value=setting.NumberOfThreadsAB
                       TextChanged="NumberOfThreadsChanged" Variant="Variant.Filled"></MudNumericField>
      <MudNumericField Style="font-size:10px" Class="pa-1 ma-1" Label="Tablebase size:" @bind-Value=setting.TableBaseSize
                       TextChanged="TBsizeChanged" Variant="Variant.Filled"></MudNumericField>
      <MudNumericField Style="font-size:10px" Class="pa-1 ma-1" Label="Number of game pairs:" @bind-Value=setting.NumberOfGamePairs
                       TextChanged="NumberOfGamePairsChanged" Variant="Variant.Filled"></MudNumericField>
    </MudItem>

  </MudGrid>
  
  <MudGrid Spacing="6">
    <MudItem>
      <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Save">Save</MudButton>
    </MudItem>
    <MudItem>
      <MudButton Color="Color.Tertiary" Variant="Variant.Outlined" OnClick="Load">Load</MudButton>
    </MudItem>
  </MudGrid>  

</MudContainer>

@code {

  private ChessConfigurationService setting; // = new ChessConfigurationService();

  private void Save() => setting.SaveSettings();
  private void Load()
  {
    setting.LoadSettings(ref setting);
  }

  private void EngineFolderChanged(string folder)
  {
    setting.EngineFolder = folder;
  }

  //private void OpeningFolderChanged(string folder)
  //{
  //  setting.Openingfolder = folder;
  //}

  private void PGNFolderChanged(string folder)
  {
    setting.PGNFolder = folder;
  }

  private void OpeningNameChanged(string opening)
  {
    setting.OpeningName = opening;
  }

  private void NeuralNetChanged(string net)
  {
    setting.NeuralNet = net;
  }

  private void RefNeuralNetChanged(string refNet)
  {
    setting.RefNeuralNet = refNet;
  }

  private void NeuralNetFolderChanged(string folder)
  {
    setting.NeuralNetFolder = folder;
  }
  private void CeresGPUChanged(string gpu)
  {
    setting.CeresGPUstring = gpu;
  }

  private void NumberOfThreadsChanged(string threads)
  {
    int numberOfthreads;
    var ok = int.TryParse(threads, out numberOfthreads);
    if (ok)
    {
      setting.NumberOfThreadsAB = numberOfthreads;
    }
  }

  private void TBsizeChanged(string size)
  {
    int tbSize;
    var ok = int.TryParse(size, out tbSize);
    if (ok)
    {
      setting.TableBaseSize = tbSize;
    }
  }

  private void TBfolderChanged(string folder)
  {
    setting.TableBaseFolder = folder;
  }

  private void CeresUCIChanges(string path)
  {
    setting.ExeExternalCeres = path;
  }

  private void LC0ExeChanged(string path)
  {
    setting.ExeLC0 = path;
  }

  private void SFExeChanged(string path)
  {
    setting.ExeSF = path;
  }

  private void Engine1ExeChanged(string path)
  {
    setting.ExeEngine1 = path;
  }

  private void Engine2ExeChanged(string path)
  {
    setting.ExeEngine2 = path;
  }

  private void NumberOfGamePairsChanged(string gamePairs)
  {
    int games;
    var ok = int.TryParse(gamePairs, out games);
    if (ok)
    {
      setting.NumberOfGamePairs = games;
    }
  }

  protected override Task OnInitializedAsync()
  {
    setting = Setup;
    return base.OnInitializedAsync();
  }
  
}
