@page "/searchCalc"
@inject ILogger<SearchCalculator> logger

<InputFile id="fileInput" OnChange="@OpenPGNFile" hidden />

<PageTitle>Median Speed calculation</PageTitle>

<MudText Class="mt-10 ml-5 p-10 mb-4" Typo="Typo.h4">Calculate search metrics from PGN-file</MudText>

<MudFab Class="ml-3 mb-3 mt-6" HtmlTag="label" Color="Color.Default" Label="Load pgn file" Size="Size.Large" StartIcon="@Icons.Material.Filled.DownloadForOffline" for="fileInput" />

<MudText Color=Color.Primary Typo=Typo.h6 Class="ml-3 mb-3 mt-6 pl-3">@fileOpenName</MudText>

<MudText Typo=Typo.h6 Class="pt-10 pl-4">Nodes and time summary - Log live stats</MudText>
<MudTable Class="mt-4 pl-3" Style="width:1000px" Items="@nodeSummaryRatio" FixedHeader=true T="SearchData">
  <ColGroup>
    <col style="width: 20%;" />
    <col style="width: 6%;" />
    <col style="width: 10%;" />
    <col style="width: 7%;" />
    <col style="width: 7%;" />
    <col style="width: 7%;" />
    <col style="width: 7%;" />
    <col style="width: 6%;" />
    <col style="width: 6%;" />
    <col style="width: 6%;" />
  </ColGroup>
  <HeaderContent>
    <MudTh Style="font-size:20px"> Player</MudTh>
    <MudTh Style="font-size:20px"> N </MudTh>
    <MudTh Style="font-size:20px"> N1</MudTh>
    <MudTh Style="font-size:20px"> N2 </MudTh>
    <MudTh Style="font-size:20px"> N1/N </MudTh>
    <MudTh Style="font-size:20px"> N2/N </MudTh>
    <MudTh Style="font-size:20px"> N2/N1 </MudTh>
    <MudTh Style="font-size:20px"> MT </MudTh>
    <MudTh Style="font-size:20px"> TopP </MudTh>
  </HeaderContent>
  <RowTemplate>
    <MudTd Style="font-size:16px" DataLabel="Player">@context.Player</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Player">@(FormatNodes(context.Navg))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Points">@(FormatNodes(context.N1avg))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Score">@(FormatNodes(context.N2avg))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="N1R">@context.FractN1N.ToString("P1") </MudTd>
      <MudTd Style="font-size:16px" DataLabel="N2R">@context.FractN2N.ToString("P1")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="N2N1R">@context.FractN2N1.ToString("P1")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="N2N1R">@context.MoveTimeMs.ToString("N0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="TopP">@context.TopPMovePercent.ToString("P0")</MudTd>
    </RowTemplate>
  </MudTable>


  <MudText Typo=Typo.h6 Class="pt-10 pl-4">Nodes and time per game - Log live stats</MudText>
<MudTable Class="mt-4 pl-3" Style="width:1000px" Items="@nodeRatios" FixedHeader=true T="SearchData">
    <ColGroup>
      <col style="width: 20%;" />
      <col style="width: 6%;" />
      <col style="width: 10%;" />
      <col style="width: 7%;" />
      <col style="width: 7%;" />
      <col style="width: 7%;" />
      <col style="width: 7%;" />
      <col style="width: 6%;" />
      <col style="width: 6%;" />
      <col style="width: 6%;" />
    </ColGroup>
    <HeaderContent>
      <MudTh Style="font-size:20px"> Player</MudTh>
      <MudTh Style="font-size:15px;text-align:center"> Game# </MudTh>
      <MudTh Style="font-size:20px"> N </MudTh>
      <MudTh Style="font-size:20px"> N1</MudTh>
      <MudTh Style="font-size:20px"> N2 </MudTh>
      <MudTh Style="font-size:20px"> N1/N </MudTh>
      <MudTh Style="font-size:20px"> N2/N </MudTh>
      <MudTh Style="font-size:20px"> N2/N1 </MudTh>
      <MudTh Style="font-size:20px"> MT </MudTh>
      <MudTh Style="font-size:20px"> TopP </MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd Style="font-size:16px" DataLabel="Player">@context.Player</MudTd>
      <MudTd Style="font-size:16px; text-align:center" DataLabel="GameNr">@context.GameNr</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Player">@(FormatNodes(context.Navg))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Points">@(FormatNodes(context.N1avg))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Score">@(FormatNodes(context.N2avg))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="N1R">@context.FractN1N.ToString("P0") </MudTd>
      <MudTd Style="font-size:16px" DataLabel="N2R">@context.FractN2N.ToString("P0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="N2N1R">@context.FractN2N1.ToString("P0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="N2N1R">@context.MoveTimeMs.ToString("N0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="TopP">@context.TopPMovePercent.ToString("P0")</MudTd>
    </RowTemplate>
  </MudTable>

  <MudText Typo=Typo.h6 Class="pt-10 pl-4">Nodes and Qs per move per game - GRID with sorting</MudText>
<MudDataGrid T="SearchData" Items="@nodePerMoveRatios" SortMode="SortMode.Single">
    <Columns>
      <PropertyColumn Property="x => x.Player" />
      <PropertyColumn Property="x => x.GameNr" Title="Move" />
      <PropertyColumn Property="x => x.Q1" />
      <PropertyColumn Property="x => x.Q2" />
      <TemplateColumn Title="N" SortBy="x => x.Navg" >
        <CellTemplate>
          <MudText> @FormatNodes(context.Item.Navg)</MudText>
        </CellTemplate>
      </TemplateColumn>
       <TemplateColumn Title="N1" SortBy="x => x.N1avg" >
        <CellTemplate>
          <MudText> @FormatNodes(context.Item.N1avg)</MudText>
        </CellTemplate>
      </TemplateColumn>
      <TemplateColumn Title="N2" SortBy="x => x.N2avg">
        <CellTemplate>
          <MudText> @FormatNodes(context.Item.N2avg)</MudText>
        </CellTemplate>
      </TemplateColumn>
      <PropertyColumn Property="x => x.FractN1N" Title="N1/N" Format="P0" />
      <PropertyColumn Property="x => x.FractN2N" Title="N2/N" Format="P0" />
      <PropertyColumn Property="x => x.FractN2N1" Title="N2/N1" Format="P0" />
      <PropertyColumn Property="x => x.MoveTimeMs" Title="MT" Format="N0" />
      <PropertyColumn Property="x => x.TimeLeftMs" Title="TL" />
      <PropertyColumn Property="x => (double)x.MoveTimeMs / (double)(x.TimeLeftMs + x.MoveTimeMs)" Format="P2" Title="TR" SortBy="x => (double)x.MoveTimeMs / (double)x.TimeLeftMs" />

    </Columns>
    <PagerContent>
    <MudDataGridPager T="SearchData" />
    </PagerContent>
  </MudDataGrid>


  @*<MudText Typo=Typo.h6 Class="pt-10 pl-4">Nodes and Qs per move per game - Log live stats</MudText>
  <MudTable Class="mt-4 pl-3" Style="width:1200px" Items="@nodePerMoveRatios" FixedHeader=true T="Parser.PGN.SearchData">
    <ColGroup>
      <col style="width: 20%;" />
      <col style="width: 6%;" />
      <col style="width: 5%;" />
      <col style="width: 5%;" />
      <col style="width: 10%;" />
      <col style="width: 10%;" />
      <col style="width: 10%;" />
      <col style="width: 7%;" />
      <col style="width: 7%;" />
      <col style="width: 6%;" />
      <col style="width: 6%;" />
      <col style="width: 6%;" />
      <col style="width: 6%;" />
    </ColGroup>
    <HeaderContent>
      <MudTh Style="font-size:20px"> Player</MudTh>
      <MudTh Style="font-size:15px;text-align:center"> Move# </MudTh>
      <MudTh Style="font-size:20px"> Q1 </MudTh>
      <MudTh Style="font-size:20px"> Q2 </MudTh>
      <MudTh Style="font-size:20px"> N </MudTh>
      <MudTh Style="font-size:20px"> N1</MudTh>
      <MudTh Style="font-size:20px"> N2 </MudTh>
      <MudTh Style="font-size:20px"> N1/N </MudTh>
      <MudTh Style="font-size:20px"> N2/N </MudTh>
      <MudTh Style="font-size:20px"> N2/N1 </MudTh>
      <MudTh Style="font-size:20px"> MT </MudTh>
      <MudTh Style="font-size:20px"> TL </MudTh>
      <MudTh Style="font-size:20px"> TR </MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd Style="font-size:16px" DataLabel="Player">@context.Player</MudTd>
      <MudTd Style="font-size:16px; text-align:center" DataLabel="GameNr">@context.GameNr</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Q1">@context.Q1.ToString("F2") </MudTd>
      <MudTd Style="font-size:16px" DataLabel="Q2">@context.Q2.ToString("F2") </MudTd>
      <MudTd Style="font-size:16px" DataLabel="Player">@(FormatNodes(context.Navg))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Points">@(FormatNodes(context.N1avg))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Score">@(FormatNodes(context.N2avg))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="N1R">@context.FractN1N.ToString("P0") </MudTd>
      <MudTd Style="font-size:16px" DataLabel="N2R">@context.FractN2N.ToString("P0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="N2N1R">@context.FractN2N1.ToString("P0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="MT">@context.MoveTimeMs.ToString("N0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="TL">@context.TimeLeftMs.ToString("N0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="TL">@(FormatTime(context.MoveTimeMs, context.TimeLeftMs))</MudTd>
    </RowTemplate>
  </MudTable>*@


  @code {

  private List<SearchData> nodeRatios = new();
  private List<SearchData> nodeSummaryRatio = new();
  private List<SearchData> nodePerMoveRatios = new();
  private string fileOpenName = "";
  IBrowserFile browserFile;

  private async Task OpenPGNFile(InputFileChangeEventArgs e)
  {
    var pgnName = e.File.Name;
    logger.LogInformation("PGN file opened {File}", pgnName);
    var env = Environment.CurrentDirectory;
    var fullPath = Path.Combine(env, pgnName);
    await using (FileStream fs = new(fullPath, FileMode.Create))
    {
      browserFile = e.File;
      await browserFile.OpenReadStream(maxAllowedSize: 1024 * 300000).CopyToAsync(fs);
    }
   
    var games = Parser.PGNParser.parsePgnFile(fullPath).ToList();
    var allRes = PGNStatistics.calculateMedianAndAvgSpeedSummaryInPgnFile(games);

    //foreach (var stat in medianSpeedTable)
    //{
    //  var nodes = FormatNodes(stat.AvgNodes);
    //  var nps = FormatNPS(stat.AvgNPS);
    //  logger.LogInformation($"Player: {stat.Player} - Nodes: {nodes} NPS: {nps} Depth: {stat.AvgDepth:N0} SD: {stat.AvgSelfDepth:N0}");
    //}

    var summaryOfLogLiveStats =
      PGNStatistics.calculateNodeRatioPerPGNfile(games)
      .ToList();

    var allIndividualGamesWithLogLiveStats =
      PGNStatistics.calculateNodeRatioPerGameInPgnFile(games, 100000)
      //.Where(e => e.Navg > 0)
      .OrderBy(e => e.GameNr)
      .ToList();

    var allIndividualMovesPerGamesWithLogLiveStats =
      PGNStatistics.calculateNodeRatioPerMovePerGameInPgnFile(games, 1000)
      //.Where(e => e.Navg > 0)
      //.OrderBy(e => e.Player)
      //.ThenBy(e => e.GameNr)
      //.OrderByDescending(e => e.MoveTimeMs)
      //.OrderByDescending(e => ((double)e.MoveTimeMs/e.TimeLeftMs)) //.ThenByDescending(e => e.FractN2N1) //Math.Abs(e.Q1) - Math.Abs(e.Q2)
      .OrderByDescending(e => e.N2avg)
      .ToList();

    nodeRatios = allIndividualGamesWithLogLiveStats;
    nodePerMoveRatios = allIndividualMovesPerGamesWithLogLiveStats;
    nodeSummaryRatio = summaryOfLogLiveStats;

    logger.LogInformation("Done with calculation");
    File.Delete(fullPath);
    StateHasChanged();
    await Task.CompletedTask;
  }
  private string FormatTime(Int64 mt, Int64 tl)
  {
    var frac = (double)mt / (double)(tl + mt);
    return frac.ToString("P0");
  }

  private string FormatNodes(double nodes)
  {
    if (nodes > 1_000_000_000)
    {
      var giga = nodes / 1_000_000_000;
      return giga.ToString("F2") + "G"; //G
    }

    else if (nodes > 1_000_000)
    {
      var mill = nodes / 1_000_000;
      return mill.ToString("F2") + "M"; //M
    }

    else if (nodes > 1_000)
    {
      var mill = nodes / 1_000;
      return mill.ToString("F1") + "K"; //K
    }

    else
    {
      return nodes.ToString("F1"); //nps
    }
  }

  private string FormatNPS(double nps)
  {
    if (nps > 1_000_000_000)
    {
      var mill = nps / 1_000_000_000;
      return mill.ToString("F1") + "Gnps"; //Gnps
    }
    else if (nps > 1_000_000)
    {
      var mill = nps / 1_000_000;
      return mill.ToString("F1") + "Mnps"; //Mnps
    }

    else if (nps > 1_000)
    {
      var thousand = nps / 1_000;
      return thousand.ToString("F1") + "Knps"; //Knps
    }

    else
    {
      return nps.ToString("F1") + " nps"; //nps
    }
  }

  protected override Task OnInitializedAsync()
  {
    return base.OnInitializedAsync();
  }

}
