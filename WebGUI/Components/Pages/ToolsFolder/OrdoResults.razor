@page "/ordo"
@inject ILogger<OrdoResults> logger

<InputFile id="fileInput" OnChange="@OpenPGNFile" hidden />

<PageTitle>Ordo table</PageTitle>

<MudText Class="mt-10 ml-5 p-10 mb-4" Typo="Typo.h4">Calculate ordo statistics from PGN-file</MudText>
<div style="margin:20px; width:700px">
  <MudTextField T="string" HelperText="Enter the name of the reference engine" Text="@refEngine" @bind-Value="refEngine" Class="mt-4 ml-5 p-10" Typo="Typo.h6"></MudTextField>
  <MudTextField T="string" HelperText="Enter the full path to the Ordo executable" Text="@executablePath" @bind-Value="executablePath" Class="mt-4 ml-5 p-10" Typo="Typo.h6"></MudTextField>
</div>

<MudFab Class="ml-3 mb-3 mt-6" HtmlTag="label" Color="Color.Default" Label="Load pgn file" Size="Size.Large" StartIcon="@Icons.Material.Filled.DownloadForOffline" for="fileInput" />

<MudText Color=Color.Primary Typo=Typo.h5 Class="ml-3 mb-3 mt-6 pl-3">@fileOpenName</MudText>

<MudText Typo=Typo.h6 Class="pt-10 pl-4">Ordo-like table</MudText>
<MudTable Class="mt-4 pl-3" Items="@engineLineData" Style="width:1300px" FixedHeader=true T="EngineLineData">

  <HeaderContent>
    <MudTh Style="font-size:20px"> Player</MudTh>
    <MudTh Style="font-size:20px"> Elo </MudTh>
    <MudTh Style="font-size:20px"> Error</MudTh>
    <MudTh Style="font-size:20px"> Points </MudTh>
    <MudTh Style="font-size:20px"> Played </MudTh>
    <MudTh Style="font-size:20px"> % </MudTh>
    <MudTh Style="font-size:20px"> CFS% </MudTh>
    <MudTh Style="font-size:20px"> Speed </MudTh>
    <MudTh Style="font-size:20px"> W </MudTh>
    <MudTh Style="font-size:20px"> D </MudTh>
    <MudTh Style="font-size:20px"> L </MudTh>
    <MudTh Style="font-size:20px"> D% </MudTh>
    <MudTh Style="font-size:20px"> Wscore </MudTh>
    <MudTh Style="font-size:20px"> Bscore </MudTh>
    <MudTh Style="font-size:20px"> Pairs </MudTh>
  </HeaderContent>
  <RowTemplate>
    <MudTd Style="font-size:16px" DataLabel="Player">@context.Player</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Player">@(isChallenger(context) ? 0 : context.Elo)</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Points">@(isChallenger(context) ? "---" : context.Error.ToString("F0"))</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Score">@context.Points</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@context.Played</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@context.Percent.ToString("F0")</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@(isChallenger(context) ? "" : context.CFS.ToString("F0"))</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@FormatNps(context.Speed)</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@context.Win</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@context.Draw</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@context.Loss</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@context.D</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@context.WhiteScore</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@context.BlackScore</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Win">@context.Pairs</MudTd>
  </RowTemplate>
</MudTable>



@code {

  private List<EngineLineData> engineLineData = new();
  private string fileOpenName = "";
  IBrowserFile browserFile;
  private Int64 testDuration = 0;
  private string refEngine = string.Empty;
  private string executablePath = @"C:/Dev/Chess/Ordo/ordo-win64.exe";

  string FormatNps(double nps) => Formatting.formatNPS(nps);

  string CheckForNanAndInfinity(double value)
  {
    //if positive infinity return the + infinity symbol
    if (double.IsPositiveInfinity(value))
    {
      return "∞";
    }

    //if negative infinity return the - infinity symbol
    if (double.IsNegativeInfinity(value))
    {
      return "∞";
    }

    //if NaN return the three dashes
    if (double.IsNaN(value))
    {
      return "---";
    }

    return value.ToString("F0");
  }

  bool isChallenger(EngineLineData data)
  {
    var higher = engineLineData.Any(e => (double)e.Played * 1.5 < data.Played);
    return higher;
  }

  private async Task OpenPGNFile(InputFileChangeEventArgs e)
  {
    engineLineData.Clear();
    var pgnName = e.File.Name;
    logger.LogInformation("PGN file opened {File}", pgnName);
    var env = Environment.CurrentDirectory;
    var fullPath = Path.Combine(env, pgnName);
    await using (FileStream fs = new(fullPath, FileMode.Create))
    {
      browserFile = e.File;
      await browserFile.OpenReadStream(maxAllowedSize: 1024 * 300000).CopyToAsync(fs);
    }
    var games = Parser.PGNParser.parsePgnFile(fullPath);
    var (consoleRes, devSummary, engineStats, cross, fraction) = Chess.Deviation.analyzeDeviations(games);
    Utilities.PGNCalculator.idealizedEloPrint(cross);
    var results = PGNCalculator.getResultsFromPGNGames(games);
    testDuration = results.Sum(r => r.GameTime);
    var testTime = TimeSpan.FromMilliseconds(testDuration);
    var msg = $"Total test duration: {testTime.Days} days, {testTime.Hours} hours and  {testTime.Minutes} minutes";
    logger.LogInformation(msg);
    if (devSummary.Count() > 0)
    {
      var consoleDeviationSummary = Chess.Deviation.printDeviationsToConsole(devSummary);
      logger.LogInformation("Fraction of games with deviation: {Fraction}", fraction);
      logger.LogInformation(consoleDeviationSummary);
    }
    logger.LogInformation(consoleRes);
    var ordered = engineStats.OrderByDescending(e => e.Points).ThenBy(e => e.Played).ToList();
    engineLineData.AddRange(ordered);
    //UpdateSpeed(games, playerRes, engineLineData);
    logger.LogInformation("PGN file parsed {File}", pgnName);
    StateHasChanged();
    if (!string.IsNullOrEmpty(executablePath))
    {
      // Or the appropriate path on macOS/Linux
      var cmd = Utilities.OrdoHelper.createOrdoCommand(executablePath, fullPath, refEngine);
      var ordoCommandString = $"\n Ordo command: {cmd.Arguments} \n";
      Console.WriteLine(ordoCommandString);
      var ordo = await Utilities.OrdoHelper.runCommandAsync(cmd, engineLineData);
      Console.WriteLine(ordo);
    }

    if (cross.Count > 2)
    {
      var crossTableConsole = Utilities.OrdoHelper.printStatsMatrix(cross);
      logger.LogInformation(crossTableConsole);
    }
    logger.LogInformation("Done with calculation");
    File.Delete(fullPath);
    StateHasChanged();
    await Task.CompletedTask;
  }

  private void UpdateSpeed(IEnumerable<PGNTypes.PgnGame> games, IEnumerable<PlayerResult> players, IEnumerable<EngineLineData> data)
  {
    var res = PGNStatistics.calculateMedianAndAvgSpeedSummaryInPgnFile(games);
    var avgSpeed =
      res.Where(e => e.Median)
      .OrderByDescending(e => e.AvgNPS).ToList();
    foreach (var player in players)
    {
      var speed = avgSpeed.FirstOrDefault(e => e.Player == player.Player);
      if (speed != null)
      {
        player.MedSpeed = speed.AvgNPS;
        player.AvgNPM = speed.AvgNodes;
      }
    }
    foreach (var line in data)
    {
      var speed = avgSpeed.FirstOrDefault(e => e.Player == line.Player);
      if (speed != null)
      {
        line.Speed = speed.AvgNPS;
      }
    }
  }

  private string FormatNodes(double nodes)
  {
    if (nodes > 1_000_000_000)
    {
      var giga = nodes / 1_000_000_000;
      return giga.ToString("F2") + "G"; //G
    }

    else if (nodes > 1_000_000)
    {
      var mill = nodes / 1_000_000;
      return mill.ToString("F2") + "M"; //M
    }

    else if (nodes > 1_000)
    {
      var mill = nodes / 1_000;
      return mill.ToString("F1") + "K"; //K
    }

    else
    {
      return nodes.ToString("F1"); //nps
    }
  }

  private string FormatNPS(double nps)
  {
    if (nps > 1_000_000_000)
    {
      var mill = nps / 1_000_000_000;
      return mill.ToString("F1") + "Gnps"; //Gnps
    }
    else if (nps > 1_000_000)
    {
      var mill = nps / 1_000_000;
      return mill.ToString("F1") + "Mnps"; //Mnps
    }

    else if (nps > 1_000)
    {
      var thousand = nps / 1_000;
      return thousand.ToString("F1") + "Knps"; //Knps
    }

    else
    {
      return nps.ToString("F1") + " nps"; //nps
    }
  }

  protected override Task OnInitializedAsync()
  {
    return base.OnInitializedAsync();
  }

}
