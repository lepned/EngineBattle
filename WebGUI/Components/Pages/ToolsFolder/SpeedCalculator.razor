@page "/speed"
@inject ILogger<SpeedCalculator> logger

<InputFile id="fileInput" OnChange="@OpenPGNFile" hidden />

<PageTitle>Median Speed calculation</PageTitle>

<MudText Class="mt-10 ml-5 p-10 mb-4" Typo="Typo.h4">Calculate engine speed statistics from PGN-file</MudText>

<MudFab Class="ml-3 mb-3 mt-6" HtmlTag="label" Color="Color.Default" Label="Load pgn file" Size="Size.Large" StartIcon="@Icons.Material.Filled.DownloadForOffline" for="fileInput" />

<MudText Color=Color.Primary Typo=Typo.h6 Class="ml-3 mb-3 mt-6 pl-3">@fileOpenName</MudText>

<MudText Typo=Typo.h6 Class="pt-10 pl-4">Median Speed metrics</MudText>
<MudTable Class="mt-4 pl-3" Style="width:1000px" Items="@medianSpeedTable" FixedHeader=true T="CoreTypes.SummaryEngineStat">

  <ColGroup>
    <col style="width: 50%;" />
    <col style="width: 10%;" />
    <col style="width: 10%;" />
    <col style="width: 10%;" />
    <col style="width: 10%;" />
    <col style="width: 10%;" />
  </ColGroup>
  <HeaderContent>
    <MudTh Style="font-size:20px"> Player</MudTh>
    <MudTh Style="font-size:20px"> Games </MudTh>
    <MudTh Style="font-size:20px"> Nodes</MudTh>
    <MudTh Style="font-size:20px"> NPS </MudTh>
    <MudTh Style="font-size:20px"> Depth </MudTh>
    <MudTh Style="font-size:20px"> SD </MudTh>
  </HeaderContent>
  <RowTemplate>
    <MudTd Style="font-size:16px" DataLabel="Player">@context.Player</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Player">@context.Games</MudTd>
    <MudTd Style="font-size:16px" DataLabel="Points">@(FormatNodes(context.AvgNodes))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Score">@(FormatNodes(context.AvgNPS))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Win">@context.AvgDepth.ToString("F0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Win">@context.AvgSelfDepth.ToString("F0")</MudTd>
    </RowTemplate>
  </MudTable>

  <MudText Typo=Typo.h6 Class="pt-10 pl-4">Average Speed metrics</MudText>
<MudTable Class="mt-4 pl-3" Style="width:1000px" Items="@averageSpeedTable" FixedHeader=true T="CoreTypes.SummaryEngineStat">

    <ColGroup>
      <col style="width: 50%;" />
      <col style="width: 10%;" />
      <col style="width: 10%;" />
      <col style="width: 10%;" />
      <col style="width: 10%;" />
      <col style="width: 10%;" />
    </ColGroup>
    <HeaderContent>
      <MudTh Style="font-size:20px"> Player</MudTh>
      <MudTh Style="font-size:20px"> Games </MudTh>
      <MudTh Style="font-size:20px"> Nodes</MudTh>
      <MudTh Style="font-size:20px"> NPS </MudTh>
      <MudTh Style="font-size:20px"> Depth </MudTh>
      <MudTh Style="font-size:20px"> SD </MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd Style="font-size:16px" DataLabel="Player">@context.Player</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Player">@context.Games</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Points">@(FormatNodes(context.AvgNodes))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Score">@(FormatNodes(context.AvgNPS))</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Win">@context.AvgDepth.ToString("F0")</MudTd>
      <MudTd Style="font-size:16px" DataLabel="Win">@context.AvgSelfDepth.ToString("F0")</MudTd>
    </RowTemplate>
  </MudTable>

  <MudText Typo=Typo.h6 Class="pt-10 pl-4">All games speed metrics</MudText>
<MudTable Class="mt-4 pl-3" Style="width:1300px" Items="@allGamesSpeedTable" Dense=true FixedHeader=true T="CoreTypes.EngineStatsPerGame">

    <ColGroup>
      <col style="width: 30%;" />
      <col style="width: 5%;" />
      <col style="width: 10%;" />
      <col style="width: 10%;" />
      <col style="width: 10%;" />
      <col style="width: 10%;" />
      <col style="width: 7%;" />
      <col style="width: 8%;" />
      <col style="width: 5%;" />
      <col style="width: 5%;" />
    </ColGroup>
    <HeaderContent>
      <MudTh Style="font-size:15px"> Player</MudTh>
      <MudTh Style="font-size:15px;text-align:center"> Game# </MudTh>
      <MudTh Style="font-size:15px;text-align:center"> AvgNodes</MudTh>
      <MudTh Style="font-size:15px;text-align:center"> MedNodes</MudTh>
      <MudTh Style="font-size:15px;text-align:center"> AvgNPS </MudTh>
      <MudTh Style="font-size:15px;text-align:center"> MedNPS </MudTh>
      <MudTh Style="font-size:15px;text-align:center"> AvgDepth </MudTh>
      <MudTh Style="font-size:15px;text-align:center"> MedDepth </MudTh>
      <MudTh Style="font-size:15px;text-align:center"> AvgSD </MudTh>
      <MudTh Style="font-size:15px;text-align:center"> MedSD </MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd Style="font-size:14px" DataLabel="Player">@context.Player</MudTd>
      <MudTd Style="font-size:14px; text-align:center" DataLabel="Player">@context.GameNr</MudTd>
      <MudTd Style="font-size:14px; text-align:center" DataLabel="Points">@(FormatNodes(context.AvgNodes))</MudTd>
      <MudTd Style="font-size:14px; text-align:center" DataLabel="Points">@(FormatNodes(context.MedianNodes))</MudTd>
      <MudTd Style="font-size:14px; text-align:center" DataLabel="Score">@(FormatNodes(context.AvgNps))</MudTd>
      <MudTd Style="font-size:14px; text-align:center" DataLabel="Score">@(FormatNodes(context.MedianNps))</MudTd>
      <MudTd Style="font-size:14px; text-align:center" DataLabel="Win">@context.AvgDepth.ToString("F0")</MudTd>
      <MudTd Style="font-size:14px; text-align:center" DataLabel="Win">@context.MedianDepth.ToString("F0")</MudTd>
      <MudTd Style="font-size:14px; text-align:center" DataLabel="Win">@context.AvgSD.ToString("F0")</MudTd>
      <MudTd Style="font-size:14px; text-align:center" DataLabel="Win">@context.MedianSD.ToString("F0")</MudTd>
    </RowTemplate>
  </MudTable>



  @code {
  private List<SummaryEngineStat> medianSpeedTable = new();
  private List<SummaryEngineStat> averageSpeedTable = new();
  private List<EngineStatsPerGame> allGamesSpeedTable = new();
  private string fileOpenName = "";
  IBrowserFile browserFile;

  private async Task OpenPGNFile(InputFileChangeEventArgs e)
  {
    var pgnName = e.File.Name;
    fileOpenName = pgnName;
    logger.LogInformation("PGN file opened {File}", pgnName);
    var env = Environment.CurrentDirectory;
    var fullPath = Path.Combine(env, pgnName);
    await using (FileStream fs = new(fullPath, FileMode.Create))
    {
      browserFile = e.File;
      await browserFile.OpenReadStream(maxAllowedSize: 1024 * 300000).CopyToAsync(fs);
    }

    var games = Parser.PGNParser.parsePgnFile(fullPath).ToList();
    var allRes = PGNStatistics.calculateMedianAndAvgSpeedSummaryInPgnFile(games);
    medianSpeedTable =
      allRes.Where(e => e.Median)
      .OrderByDescending(e => e.AvgNPS).ToList();
    logger.LogInformation("PGN file parsed {File}", pgnName);

    logger.LogInformation("\nMedian speed calculated\n");
    var summary = ConsoleHelper.writeSummaryEngineStatsToConsole(medianSpeedTable);
    logger.LogInformation(summary);
    //foreach (var stat in medianSpeedTable)
    //{
    //  var nodes = FormatNodes(stat.AvgNodes);
    //  var nps = FormatNPS(stat.AvgNPS);
    //  logger.LogInformation($"Player: {stat.Player} - Nodes: {nodes} NPS: {nps} Depth: {stat.AvgDepth:N0} SD: {stat.AvgSelfDepth:N0}");
    //}

    StateHasChanged();
    averageSpeedTable =
      allRes.Where(e => e.Median == false)
      .OrderByDescending(e => e.AvgNPS).ToList();

    var allIndividualGames =
      PGNStatistics.calculateMedianAndAvgSpeedPerGameInPgnFile(games)
      .Where(e => e.AvgNps > 0)
      .OrderBy(e => e.GameNr)
      .ToList();

    allGamesSpeedTable = allIndividualGames;
    logger.LogInformation("\nSpeed per game calculated\n");
    var consoleSummary = ConsoleHelper.writeEngineStatsToConsole(allIndividualGames);
    logger.LogInformation(consoleSummary);
    
    logger.LogInformation("Done with calculation");
    File.Delete(fullPath);
    StateHasChanged();
    await Task.CompletedTask;
  }

  private string FormatNodes(double nodes)
  {
    if (nodes > 1_000_000_000)
    {
      var giga = nodes / 1_000_000_000;
      return giga.ToString("F2") + "G"; //G
    }

    else if (nodes > 1_000_000)
    {
      var mill = nodes / 1_000_000;
      return mill.ToString("F2") + "M"; //M
    }

    else if (nodes > 1_000)
    {
      var mill = nodes / 1_000;
      return mill.ToString("F1") + "K"; //K
    }

    else
    {
      return nodes.ToString("F1"); //nps
    }
  }

  private string FormatNPS(double nps)
  {
    if (nps > 1_000_000_000)
    {
      var mill = nps / 1_000_000_000;
      return mill.ToString("F1") + "Gnps"; //Gnps
    }
    else if (nps > 1_000_000)
    {
      var mill = nps / 1_000_000;
      return mill.ToString("F1") + "Mnps"; //Mnps
    }

    else if (nps > 1_000)
    {
      var thousand = nps / 1_000;
      return thousand.ToString("F1") + "Knps"; //Knps
    }

    else
    {
      return nps.ToString("F1") + " nps"; //nps
    }
  }

  protected override Task OnInitializedAsync()
  {
    return base.OnInitializedAsync();
  }

}
